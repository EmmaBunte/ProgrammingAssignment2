install.packages("KernSmooth")
library(KernSmooth)
install.packages("ggplot2")
swirl()
load("~/0 Data Scientist/Cursussen/Data Scientist Specialization/2. R Programming/Opdrachten/.RData")
swirl()
library(swirl)
ckear
clear
clear()
getwd()
setwd(C:\Users\Emma\Documents\0 Data Scientist\Cursussen\Data Scientist Specialization\2. R Programming\Opdrachten)
setwd(0 Data Scientist\Cursussen\Data Scientist Specialization\2. R Programming\Opdrachten)
setwd("C:\Users\Emma\Documents\0 Data Scientist\Cursussen\Data Scientist Specialization\2. R Programming\Opdrachten")
setwd("\Users\Emma\Documents\0 Data Scientist\Cursussen\Data Scientist Specialization\2. R Programming\Opdrachten")
setwd(""\Users\Emma\Documents\0 Data Scientist\Cursussen\Data Scientist Specialization\2. R Programming\Opdrachten")
install.packages("forecast")
library(swirl)
swirl()
Sys.Date()
mean( c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
SUBMIT()
submit()
telegram("hello","world")
submit
submit()
mad_libs(place="Deventer",adjective="angry", noun='school')
submit()
'I' %p% 'love' %p% 'R!'
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Data Analysis")
install_from_swirl("Statistical Inference")
install_from_swirl("Regression Models")
install_from_swirl("Machine Learning")
install_from_swirl("Practical Machine Learning")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viefinfo()
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flags_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_,at<-sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
setwd("~/0 Data Scientist/Cursussen/Data Scientist Specialization/2. R Programming/Opdrachten/a2/ProgrammingAssignment2")
source('~/0 Data Scientist/Cursussen/Data Scientist Specialization/2. R Programming/Opdrachten/a2/ProgrammingAssignment2/cachematrix.R')
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
